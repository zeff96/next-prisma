// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  USER
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   @db.Text
  role          UserRole  @default(USER)
  image         String?
  accounts      Account[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  lastViewedNotifications DateTime?
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires_at DateTime


  @@unique([email, token])
}

model Post {
  id String @id @default(cuid())
  userId       String
  body String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment {
  id String @id @default(cuid())
  userId       String
  postId       String
  body String  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id String @id @default(cuid())
  userId       String
  postId       String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  type        String
  dateCreated DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  read        Boolean  @default(false)
  channel     String?
}